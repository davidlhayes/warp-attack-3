controller.put('/move', function(req, res, next) {
  // pull out arguments
  // console.log('req.body ' + req.body)
  var orgRow = req.body.orgRow;
  var orgCol = req.body.orgCol;
  var dstRow = req.body.dstRow;
  var dstCol = req.body.dstCol;
  var orgId;
  var spot;
  var samespace = false;
  var moveResult;
  console.log('token.js ' + orgRow, orgCol, dstRow, dstCol);
  // what mode are we in
  playersRef.child('setup').once("value", function(snapshot) {
    var isSetup = (snapshot.val().turn=='setup');
    console.log('isSetup: ' + isSetup);

    // first get the id of the mover
    var queryRef = tokensRef.orderByChild('row').startAt(orgCol).endAt(orgCol);
    queryRef.once("value", function(snapshot) {
      for (var key in snapshot) {
        if (snapshot.val()[key].col == changedCell.col) {
          orgId = snapshot.val()[key]._id;
          orgSpec = snapshot.val()[key].tokenSpec;
        }
      // 2nd get the id of the prey
        var queryRef = tokensRef.orderByChild('row').startAt(dstCol).endAt(dstCol);
        queryRef.once("value", function(snapshot) {
          for (var key in snapshot) {
            if (snapshot.val()[key].col == changedCell.col) {
              dstId = snapshot.val()[key]._id;
              dstSpec = snapshot.val()[key].tokenSpec;
            }
        // transform coordinates back from rotated board;
        console.log('token.js ' + orgRow, orgCol, dstRow, dstCol);
        // res.json(result);

          // console.log('dst ' + dstId, dstSpec);
          if (isSetup) {
            console.log('line 397: ' + orgRow,orgCol,orgSpec,dstRow,dstCol,dstSpec);
            moveResult = checkSet.checkSet(orgRow,orgCol,orgSpec,dstRow,dstCol,dstSpec);
          } else {
            moveResult = checkMove.checkMove(orgRow,orgCol,orgSpec,dstRow,dstCol,dstSpec);
          }
          console.log(moveResult)
          switch(moveResult) {
            case 'same square':
            case 'forbidden':
            case 'immovable':
            case 'mover out of bounds':
            case 'destination out of bounds':
            case 'out of bounds':
              samespace = true;
              break;
            case 'move to empty space':
              // swap empty with mover
              console.log('here');
              // update destination with origin spec
              tokensRef.child(dstId).update({ tokenSpec: orgSpec });
              // update origin with empty
              tokensRef.child(orgId).udpdate({ tokenSpec: 'empty' });
              break;
            case 'victory':
              // swap org and dst
              // update destination with origin spec
              tokensRef.child(dstId).update({ tokenSpec: orgSpec });
              // update origin with empty
              tokensRef.child(orgId).update({ tokenSpec: 'empty' });
              // move loser to empty space in appropriate tray
              discard.discard(dstSpec);
              break;
            case 'win':
              // swap org and dst
              // update destination with origin spec
              tokensRef.child(dstId).update({ tokenSpec: orgSpec });
              // update origin with empty
              tokensRef.child(orgId).update({ tokenSpec: 'empty' });
              // move loser to empty space in appropriate tray
              discard.discard(dstSpec);
              break;
            case 'defeat':
              // just place the mover in the tray
              tokensRef.child(orgId).update({ tokenSpec: 'empty' });
              // move loser to empty space in appropriate tray
              discard.discard(orgSpec);
              break;
            case 'double defeat': enter
              // move org and dst to tray, replace with empties
              // mover first
              // just place the mover in the tray
              tokensRef.child(orgId).update({ tokenSpec: 'empty' });
              // move loser to empty space in appropriate tray
              discard.discard(orgSpec);
              // prey next
              // just place the mover in the tray
              tokensRef.child(dstId).update({ tokenSpec: 'empty' });
              // move loser to empty space in appropriate tray
              discard.discard(dstSpec);
              break;
            default:
            // move was not allowed. Just send a message.
            res.json({ 'message': moveResult });
          }
          console.log('567: ' + orgRow,orgCol,orgSpec,dstRow,dstCol,dstSpec,moveResult);
        });
        // if move happened, update Turn
        console.log('SAME SPACE : ' + samespace);
    });
  });
}); // controller move token
